" =========================================
" Preface
" =========================================
" {{{
" Sections:
"    -> BasicSettings
"    -> AutoCommands
"    -> KeyMappings
"    -> Functions
"    -> LoadPlugin
" }}}

" =========================================
" BasicSettings
" =========================================
" {{{
    " General {{{
    set nocompatible
    set nobackup
    set noswapfile
    set history=1024

    " 默认文件保存
    exec 'cd ' . fnameescape('D:\Code')
    "自动设置当前目录为正在编辑的目录
    set autochdir
    autocmd BufEnter * silent! lcd %:p:h:gs/ /\\ /

    set whichwrap=b,s,<,>,[,]
    set nobomb
    set backspace=indent,eol,start whichwrap+=<,>,[,]
    " Vim 的默认寄存器和系统剪贴板共享
    set clipboard+=unnamed
    " 设置 alt 键不映射到菜单栏
    set winaltkeys=no

    "关闭提示音
    set noeb
    set vb t_vb=
    " }}}

    " Lang & Encoding {{{
    set tenc=utf-8
    set encoding=utf-8
    set fileencodings=utf-8,chinese,latin-1
    if has("win32")
    set fileencoding=chinese
    else
    set fileencoding=utf-8
    endif
    "解决菜单乱码
    source $VIMRUNTIME/delmenu.vim
    source $VIMRUNTIME/menu.vim
    "解决consle输出乱码
    language messages zh_CN.utf-8
    set fenc= 
    " }}}

    " GUI {{{
    " 设置 gvim 显示字体
    set gfw=幼圆:h12:cGB2312
    set guifont=DroidSansMono_Nerd_Font_Mono:h12

    set cursorline
    set hlsearch
    " 开启实时搜索功能
    set incsearch
    " 搜索时大小写不敏感
    set ignorecase
    set number
    "Show related row numbers
    set relativenumber
    "在光标接近底端或顶端时，自动下滚或上滚
    set scrolloff=10  
    " 窗口大小
    set lines=25 columns=80
    " 分割出来的窗口位于当前窗口下边/右边
    set splitbelow
    set splitright
    "不显示工具/菜单栏
    set guioptions-=T
    set guioptions-=m
    set guioptions-=L
    set guioptions-=r
    set guioptions-=b
    " }}}

    " Format {{{
    set autoindent
    set smartindent
    set tabstop=4
    set shiftwidth=4
    set softtabstop=4
    set expandtab
    "自动折叠
    "set foldmethod=marker
    set nofoldenable
    syntax on
    " }}}
" }}}

" =========================================
" autoCommands
" =========================================
" {{{
    " DisableAutoComment: 禁止自动插入注释
    " {{{
    augroup DisableAutoComment
        autocmd!
        autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
    augroup END
    " }}}

    " LineNumber: 不同模式行号显示
    " {{{
    augroup LineNumber
        autocmd!
        autocmd InsertEnter * :set norelativenumber number
        autocmd InsertLeave * :set relativenumber
    augroup END
    " }}}
" }}}

" =========================================
" KeyMappings
" =========================================
" {{{

    "set my leader
    "let mapleader=";"
    let mapleader="\<Space>"

    " 清楚搜索高亮
    inoremap <silent> <esc> <Esc>:noh<CR>
    nnoremap <silent> <esc> <Esc>:noh<CR>
    " 行首和行末快捷键
    noremap H ^
    noremap L $
    " U 为 redo
    noremap U <C-r>
    " 查找时将结果置于屏幕中央
    nnoremap <silent> n  nzz
    nnoremap <silent> N  Nzz
    nnoremap <silent> *  *zz
    nnoremap <silent> #  #zz
    nnoremap <silent> g* g*zz
" }}}


" =========================================
" Functions
" =========================================
" {{{
    " QuickRun: 一键运行
    " {{{
    command! QuickRun call <SID>QuickRun()
    noremap  <silent> <F5>       <Esc>:call <SID>QuickRun()<CR>
    noremap! <silent> <F5>       <Esc>:call <SID>QuickRun()<CR>
    function! s:QuickRun()
        exec 'w'
        if &filetype == 'html' || &filetype == 'htmldjango'
            call <SID>BrowserOpen(expand("%:p"))
        elseif &filetype == 'markdown'
            :MarkdownPreview
        elseif &filetype == 'tex'
            :AsyncRun xelatex %
        elseif &filetype == 'c'
            :AsyncRun gcc -g % && ./a.out
        elseif &filetype == 'cpp'
            :AsyncRun g++ -g % && ./a.out
        elseif &filetype == 'sh'
            :AsyncRun bash %
        elseif &filetype == 'python'
            if has("unix")
                " unix
                :AsyncRun -raw python3 %
            else
                " windows
                :AsyncRun -raw python %
            endif
        else
            echo "Not supported filetype"
        endif
    endfunction
    " }}}

    " FileExplore: 在文件浏览器中打开当前目录
    " {{{
    noremap <silent> <F2> <Esc>:call <SID>FileExplore()<CR>
    command! FileExplore call <SID>FileExplore()
    function! s:FileExplore()
        let l:path = expand(getcwd())
        call <SID>BrowserOpen(l:path)
    endfunction
    " }}}

    " BrowserOpen: 打开文件或网址
    " {{{
    command! -nargs=+ BrowserOpen call <SID>BrowserOpen(<q-args>)
    function! s:BrowserOpen(obj)
        " windows(mingw)
        if has('win32') || has('win64') || has('win32unix')
            let l:cmd = 'rundll32 url.dll,FileProtocolHandler ' . a:obj
        elseif has('mac') || has('macunix') || has('gui_macvim') || system('uname') =~? '^darwin'
            let l:cmd = 'open ' . a:obj
        elseif executable('xdg-open')
            let l:cmd = 'xdg-open ' . a:obj
        else
            echoerr "No browser found, please contact the developer."
        endif

        if exists('*jobstart')
            call jobstart(l:cmd)
        elseif exists('*job_start')
            call job_start(l:cmd)
        else
            call system(l:cmd)
        endif
    endfunction
    " }}}
" }}}

" =========================================
" LoadPlugin
" =========================================
" Plug List {{{
call plug#begin('D:\Softs\Edit\Vim\vimfiles\plugged')
filetype plugin indent on

    " +beautiful {{{
    "美化状态栏
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
    " airline-setting {{{
    "加强版状态栏
    "let g:airline_theme='molokai'
    let g:airline_theme='gruvbox'
    "使用powerline打过补丁的字体
    let g:airline_powerline_fonts = 1
    "关闭状态显示空白符号计数,这个对我用处不大"
    let g:airline#extensions#whitespace#enabled = 0
    let g:airline#extensions#whitespace#symbol = '!'
    "开启tabline
    let g:airline#extensions#tabline#enabled = 1
    "tabline中buffer显示编号
    let g:airline#extensions#tabline#buffer_nr_show = 1
    " }}}
    " 界面
    Plug 'mhinz/vim-startify'
    Plug 'justinmk/vim-dirvish'

    "theme color
    Plug 'flazz/vim-colorschemes'
    Plug 'tomasr/molokai'
    Plug 'morhetz/gruvbox'
    Plug 'nanotech/jellybeans.vim'
    " theme-setting {{{
    " 配色方案
    " set background=dark
    set background=light
    "colorscheme jellybeans
    "colorscheme molokai
    colorscheme gruvbox
    " }}}
    " 图标
    "Plug 'ryanoasis/vim-devicons'
    "中文帮助文档
    Plug 'yianwillis/vimcdoc'
    "}}}

    " +programming {{{
    "文件树
    Plug 'scrooloose/nerdtree'
    Plug 'Xuyuanp/nerdtree-git-plugin'

    "文件搜索
    Plug 'Yggdroot/LeaderF', { 'do': '.\install.bat' }
    "异步语法检查
    Plug 'w0rp/ale'
    "括号补全
    Plug 'jiangmiao/auto-pairs'
    "补全
    Plug 'maralla/completor.vim'
    Plug 'maralla/completor-neosnippet'
    Plug 'Shougo/neosnippet-snippets'
    " 补全设置 {{{
    "使用tab补全
    inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
    inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
    inoremap <expr> <cr> pumvisible() ? "\<C-y>\<cr>" : "\<cr>"
    " }}}
    "注释
    Plug 'scrooloose/nerdcommenter'
    "}}}

    " +lang {{{
    " markdown
    Plug 'plasticboy/vim-markdown', {'for': 'markdown'}
    " python
    "Plug 'python-mode/python-mode', { 'for': 'python' }
    "let g:pymode_python = 'python3'
    " html
    Plug 'othree/html5.vim',       { 'for': 'html' }
    Plug 'hail2u/vim-css3-syntax', { 'for': 'css' }
    Plug 'mattn/emmet-vim',        { 'for': [ 'html', 'vue', 'css' ] }
    " c-c++
    Plug 'rhysd/vim-clang-format',           { 'for': [ 'c', 'cpp' ] }
    Plug 'octol/vim-cpp-enhanced-highlight', { 'for': [ 'c', 'cpp' ] }
    " javaScript
    Plug 'pangloss/vim-javascript',  { 'for': ['javascript'] }
    Plug 'neoclide/vim-jsx-improve', { 'for': ['javascript', 'javascript.jsx'] }
    "}}}

    call plug#end()
" }}}

" =========================================
" PluginSettings
" =========================================
    " vim-startify
    " {{{
    noremap <silent> <Leader>bo <Esc>:Startify<CR>
    let g:ascii = [
            \ '`',
            \ ' ▄█          ▄████████    ▄████████    ▄████████ ███▄▄▄▄',
            \ '███         ███    ███   ███    ███   ███    ███ ███▀▀▀██▄',
            \ '███         ███    █▀    ███    ███   ███    ███ ███   ███',
            \ '███        ▄███▄▄▄       ███    ███  ▄███▄▄▄▄██▀ ███   ███',
            \ '███       ▀▀███▀▀▀     ▀███████████ ▀▀███▀▀▀▀▀   ███   ███',
            \ '███         ███    █▄    ███    ███ ▀███████████ ███   ███',
            \ '███▌    ▄   ███    ███   ███    ███   ███    ███ ███   ███',
            \ '█████▄▄██   ██████████   ███    █▀    ███    ███  ▀█   █',
            \ '                                      ███    ███',
            \]
    let g:startify_custom_header_quotes = [
        \ ['1. 该得到的尚未得到，要丧失的早已丧失，你说的曙光到底是什么意思？'],
        \ ['2. 任何在我15岁以前诞生的科技，都是稀松平常的常识；',
        \'在我15-35岁之间诞生的科技，都是改变人类未来的壮举；',
        \'而在我35岁以后诞生的科技，都是骗子。'],
        \ ['3. 为什么呢？因为类信息流产品，都有两个原罪：',
        \'第一，是沉浸；第二，是被动。'],
        \ ['4. 当你不能控制所发生的事，尝试着去控制你对这事情的反应，',
        \'而这正是你的力量所在。'],
        \ ['5. 我是不相信循序渐进的，人生总是会有一大段跳跃。'],
        \ ['6. 无聊是非常有必要的，一个人在空白时间所做的事，',
        \'决定了这个人和其他人根本的不同'],
        \ ['7. 人生最有价值的时刻，不是最后的功成名就，','而是对未来正充满期待与不安之时。'],
        \ ['8. 真正的艺术作品无不在揭示真相，引人深思，愉悦审美，启示灵性'],
        \ ['9. 我反而更加相信，大众普遍认知的反面，更像是未来真正的样子'],
        \ ]
    let g:startify_custom_header = map(g:ascii + startify#fortune#boxed(), '"    ".v:val')
    " }}}

    " ale-setting {{{
    let g:ale_set_highlights = 0
    "自定义error和warning图标
    let g:ale_sign_error = '✗'
    let g:ale_sign_warning = '⚡'
    "在vim自带的状态栏中整合ale
    let g:ale_statusline_format = ['✗ %d', '⚡ %d', '✔ OK']
    "显示Linter名称,出错或警告等相关信息
    let g:ale_echo_msg_error_str = 'E'
    let g:ale_echo_msg_warning_str = 'W'
    let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
    "打开文件时不进行检查
    let g:ale_lint_on_enter = 0
    "普通模式下，sp前往上一个错误或警告，sn前往下一个错误或警告
    nmap sp <Plug>(ale_previous_wrap)
    nmap sn <Plug>(ale_next_wrap)
    "<Leader>s触发/关闭语法检查
    nmap <Leader>s :ALEToggle<CR>
    "<Leader>d查看错误或警告的详细信息
    nmap <Leader>d :ALEDetail<CR>
    "使用clang对c和c++进行语法检查，对python使用flake8进行语法检查
    let g:ale_linters = {
    \   'c++': ['clang'],
    \   'c': ['clang'],
    \   'python': ['flake8'],
    \}
    " }}}


    " 注释说明 {{{
    "<leader>cc   加注释
    "<leader>cu   解开注释
    "<leader>c<space>  加上/解开注释, 智能判断
    "<leader>cy   先复制, 再注解(p可以进行黏贴)
    " 注释的时候自动加个空格, 强迫症必配
    "let g:NERDSpaceDelims=1
    " }}}

    " 文件树设置 {{{
    " 关闭NERDTree快捷键
    map <leader>t :NERDTreeToggle<CR>
    ""当NERDTree为剩下的唯一窗口时自动关闭
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
    ""修改树的显示图标
    let g:NERDTreeDirArrowExpandable = '►'
    let g:NERDTreeDirArrowCollapsible = '▼'
    let NERDTreeAutoCenter=1
    " 显示行号
    let NERDTreeShowLineNumbers=1
    " 是否显示隐藏文件
    let NERDTreeShowHidden=1
    " 设置宽度
    let NERDTreeWinSize=25
    " 在终端启动vim时，共享NERDTree
    let g:nerdtree_tabs_open_on_console_startup=1
    " 忽略一下文件的显示
    let NERDTreeIgnore=['\.pyc','\~$','\.swp']
    let g:NERDTreeIndicatorMapCustom = {
        \ "Modified"  : "✹",
        \ "Staged"    : "✚",
        \ "Untracked" : "✭",
        \ "Renamed"   : "➜",
        \ "Unmerged"  : "═",
        \ "Deleted"   : "✖",
        \ "Dirty"     : "✗",
        \ "Clean"     : "✔︎",
        \ 'Ignored'   : '☒',
        \ "Unknown"   : "?"
        \ }
    " }}}
